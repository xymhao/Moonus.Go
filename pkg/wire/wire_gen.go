// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeEvent(phrase string) (Event, error) {
	message := NewMessage(phrase)
	greeter := NewGreeter(message)
	event, err := NewEvent(greeter)
	if err != nil {
		return Event{}, err
	}
	return event, nil
}

func InitializeFooer() Fooer {
	myFooer := provideMyFooer()
	return myFooer
}

func InitializeFooer2() *MyFooer {
	myFooer := provideMyFooer()
	return myFooer
}

// wire.go:

type Fooer interface {
	Foo() string
}

type MyFooer string

func (b *MyFooer) Foo() string {
	return string(*b)
}

func provideMyFooer() *MyFooer {
	b := new(MyFooer)
	*b = "Hello, World!"
	return b
}

type Bar string

func provideBar(f Fooer) string {

	return f.Foo()
}

var Set = wire.NewSet(
	provideMyFooer, wire.Bind(new(Fooer), new(*MyFooer)))

type FooBar struct {
	f Fooer
}
